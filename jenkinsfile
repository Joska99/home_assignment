pipeline {
    agent {
        label 'agent1'
    }
    environment {
        // Docker
        IMG_NAME_APP = 'docker-nodejs'
        VERSION = '1.0.0'
        // Helm
        HELM_PACKAGE_DIR = './nodejs-app-chart/'
        HELM_PACKAGE = 'nodejs-app-chart-0.1.0.tgz'
        HELM_REPO = 'nodejs-app-chart'
        // EC2 private IP addr
        PROD_HOST = 'ubuntu@172.31.27.166'
    }
    stages {
        stage('Docker Build') {
            steps {
                withCredentials([
                    string(credentialsId: 'ecr-registry', variable: 'URL')
                ]) {
                    script {
                            sh '''
                                sudo docker build -t "$URL/$IMG_NAME_APP:$VERSION" .
                                sudo docker build -t "$URL/$IMG_NAME_APP:latest" .
                            '''
                    }
                }
            }
        }
        stage('Docker image push to ECR') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'ecr-user-pswd', passwordVariable: 'PSWD', usernameVariable: 'USER'),
                    string(credentialsId: 'ecr-registry', variable: 'URL')
                ]) {
                    script {
                            // login to ECR regestry
                            // push app img with tag latest
                            sh '''
                                echo "$PSWD" | sudo docker login --username "$USER" --password-stdin "$URL"
                                sudo docker push "$URL/$IMG_NAME_APP:$VERSION"
                                sudo docker push "$URL/$IMG_NAME_APP:latest"
                            '''
                    }
                }
            }
        }
        stage('Helm package push to ECR') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'ecr-user-pswd', passwordVariable: 'PSWD', usernameVariable: 'USER'),
                    string(credentialsId: 'ecr-registry', variable: 'URL')
                ]) {
                    // Login to ECR regestry
                    // Package Helm chart
                    // Push Helm chart to regestry
                    sh '''
                        echo "$PSWD" | helm registry login --username "$USER" --password-stdin "$URL"
                        helm package "$HELM_PACKAGE_DIR"
                        helm push "$HELM_PACKAGE" "oci://$URL"
                    '''
                }
            }
        }
        stage('CD - Deploy to Minikube') {
            steps {
                withCredentials([
                    file(credentialsId: 'ec2_minikube_production', variable: 'SECRET'),
                    string(credentialsId: 'ecr-registry', variable: 'URL')
                ]) {
                    script {
                        // Connect to EC2 with Minikube cluster to deploy Helm
                        sh '''
                            ssh -o StrictHostKeyChecking=no -i "$SECRET"  "$PROD_HOST" helm install app  "oci://$URL/$HELM_REPO"
                        '''
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                // Clean
                sh 'rm -rf $HELM_PACKAGE'
                sh 'ls -lah'
            }
        }
    }
}

